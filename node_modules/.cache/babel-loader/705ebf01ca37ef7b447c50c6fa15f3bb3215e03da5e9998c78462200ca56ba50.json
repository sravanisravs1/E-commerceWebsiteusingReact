{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\Ecommerce\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useContext, Fragment, useCallback, useEffect } from \"react\";\nimport About from './pages/About';\nimport Home from \"./pages/Home\";\nimport { Button } from \"react-bootstrap\";\nimport { createBrowserRouter, RouterProvider } from \"react-router-dom\";\nimport MovieList from './components/Movies/MovieList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst router = createBrowserRouter([{\n  path: '/about',\n  element: /*#__PURE__*/_jsxDEV(About, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 26\n  }, this)\n}, {\n  path: '/',\n  element: /*#__PURE__*/_jsxDEV(Home, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 21\n  }, this)\n}\n// {path:'/store',element:<Store/>}\n]);\n\nconst App = props => {\n  _s();\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [isRetry, setIsRetry] = useState(true);\n  const [count, setCount] = useState(0);\n  // const retry = ()=>{setTimeout(MoviesList(), 5000)}\n  // const clearRetry=()=>{clearTimeout(retry)}\n\n  //   function MoviesList () {\n  //     fetch('https://swapi.dev/api/films/')\n  //     .then((response)=>{ return response.json();\n  // })\n  //     .then(data=>console.log(data.results))\n\n  // }\n  const MoviesList = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n    setCount(count + 1);\n    try {\n      const response = await fetch('https://swapi.dev/api/film/');\n      if (!response.ok) {\n        throw new Error('something went wrong,Retrying...');\n      }\n      const data = await response.json();\n      const transformedMovies = data.results.map(movieData => {\n        return {\n          id: movieData.episode_id,\n          title: movieData.title,\n          releaseDate: movieData.release_date,\n          openingText: movieData.opening_crawl\n        };\n      });\n      setMovies(transformedMovies);\n    } catch (error) {\n      setError(error.message);\n    }\n    setIsLoading(false);\n  }, []);\n  function cancelRetry() {\n    setIsRetry(false);\n    setIsLoading(false);\n  }\n\n  //let intervalID =setInterval(()=>{MoviesList()},10000)\n  if (count === 5) {\n    clearInterval(intervalID);\n  }\n  useEffect(() => {\n    MoviesList();\n  }, []);\n  const retry = function (MovieList) {\n    let retriesLeft = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5;\n    let interval = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1000;\n    return new Promise((resolve, reject) => {\n      MovieList().then(resolve).catch(error => {\n        setTimeout(() => {\n          if (retriesLeft === 1) {\n            // reject('maximum retries exceeded');\n            reject(error);\n            return;\n          }\n          // Passing on \"reject\" is the important part\n          retry(MovieList, retriesLeft - 1, interval).then(resolve, reject);\n        }, interval);\n      });\n    });\n  };\n  retry(() => fetch('https://jsonplaceholder.typicode.com/todos/1')).then(response => response.json()).then(json => console.log(json)).catch(error => console.log(error));\n\n  // const retry = \n  //   setInterval(()=>{\n  //     MoviesList()\n  //   }\n  //   ,10000)\n\n  let content = /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Found no Movies\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 17\n  }, this);\n  if (movies.length > 0) {\n    content = /*#__PURE__*/_jsxDEV(MovieList, {\n      movies: movies\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 15\n    }, this);\n  }\n  if (error && !isLoading && isRetry) {\n    content = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 15\n    }, this);\n  }\n  if (error && !isRetry && !isLoading) {\n    content = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Something went wrong,check network settings\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 14\n    }, this);\n  }\n  if (isLoading) {\n    content = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 15\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(RouterProvider, {\n      router: router\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"success\",\n        onClick: MoviesList,\n        children: \"FetchMovies\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"danger\",\n        onClick: cancelRetry,\n        children: \"Cancel \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 3\n  }, this);\n};\n_s(App, \"aWzI2p02rAYy1IyR3lzB6i06m4s=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useContext","Fragment","useCallback","useEffect","About","Home","Button","createBrowserRouter","RouterProvider","MovieList","router","path","element","App","props","movies","setMovies","isLoading","setIsLoading","error","setError","isRetry","setIsRetry","count","setCount","MoviesList","response","fetch","ok","Error","data","json","transformedMovies","results","map","movieData","id","episode_id","title","releaseDate","release_date","openingText","opening_crawl","message","cancelRetry","clearInterval","intervalID","retry","retriesLeft","interval","Promise","resolve","reject","then","catch","setTimeout","console","log","content","length"],"sources":["C:/Users/Admin/Desktop/Ecommerce/src/App.js"],"sourcesContent":["import React, { useState ,useContext,Fragment,useCallback, useEffect} from \"react\";\nimport About from './pages/About';\nimport Home from \"./pages/Home\";\nimport { Button } from \"react-bootstrap\";\nimport { createBrowserRouter ,RouterProvider} from \"react-router-dom\";\nimport MovieList from './components/Movies/MovieList'\n\nconst router = createBrowserRouter([\n  \n  {path:'/about',element:<About/>},\n  {path:'/',element:<Home/>},\n  // {path:'/store',element:<Store/>}\n  \n]);\n\n\n\nconst  App = (props) => {\n  const [movies,setMovies ] = useState([]);\n  const [isLoading , setIsLoading ] = useState(false);\n  const [error,setError] = useState(null);\n  const [isRetry,setIsRetry] = useState(true);\n  const [count,setCount] = useState(0)\n  // const retry = ()=>{setTimeout(MoviesList(), 5000)}\n  // const clearRetry=()=>{clearTimeout(retry)}\n  \n//   function MoviesList () {\n//     fetch('https://swapi.dev/api/films/')\n//     .then((response)=>{ return response.json();\n// })\n//     .then(data=>console.log(data.results))\n    \n// }\nconst MoviesList = useCallback(async()=> {\n      \n  setIsLoading(true);\n  setError(null);\n  setCount(count+1)\n  \n  try{\n      const response= await fetch('https://swapi.dev/api/film/');\n      if (!response.ok ){\n       throw new Error('something went wrong,Retrying...');\n      }\n      \n      const data = await response.json();\n      const transformedMovies = data.results.map((movieData=>{\n        return ({\n          id:movieData.episode_id,\n          title:movieData.title,\n          releaseDate:movieData.release_date,\n          openingText:movieData.opening_crawl\n        });\n\n      }));\n      \n    setMovies(transformedMovies);\n    \n\n  } catch(error) {\n        setError(error.message);    \n  }   \n  setIsLoading(false) ;  \n\n  \n},[]);\nfunction cancelRetry(){\n  setIsRetry(false);\n  setIsLoading(false);\n  } \n\n//let intervalID =setInterval(()=>{MoviesList()},10000)\nif (count ===5 ){\n  clearInterval(intervalID)\n}\nuseEffect(()=>{\n  MoviesList();\n },[])\n const retry = (MovieList , retriesLeft = 5, interval = 1000) => {\n  return new Promise((resolve, reject) => {\n    MovieList()\n      .then(resolve)\n      .catch(error => {\n        setTimeout(() => {\n          if (retriesLeft === 1) {\n            // reject('maximum retries exceeded');\n            reject(error);\n            return;\n          }\n          // Passing on \"reject\" is the important part\n          retry(MovieList, retriesLeft - 1, interval).then(resolve, reject);\n        }, interval);\n      });\n  });\n};\n\nretry(() => fetch('https://jsonplaceholder.typicode.com/todos/1'))\n  .then(response => response.json())\n  .then(json => console.log(json))\n  .catch(error => console.log(error));  \n\n \n  // const retry = \n  //   setInterval(()=>{\n  //     MoviesList()\n  //   }\n  //   ,10000)\n  \n  \n  let content = <p>Found no Movies</p>\n  if(movies.length > 0) {\n    content = <MovieList movies={movies}/>\n  }\n  if (error && !isLoading&& isRetry){\n    content = <p>{error}</p>\n   \n  }\n  if (error && !isRetry && !isLoading){\n    content =<p>Something went wrong,check network settings</p>\n    \n  }\n  if(isLoading) {\n    content = <p>Loading...</p>\n  }\n\n  \n  return(\n  <Fragment>\n      <RouterProvider router={router}/>\n      <section>\n          <Button variant='success' onClick={MoviesList}>\n            FetchMovies\n          </Button>\n          <Button variant='danger' onClick={cancelRetry}>Cancel </Button>\n          \n      </section>\n      <section>\n        {/* {!isLoading && movies.length > 0 && <MovieList movies={movies}/>}\n        {!error && isLoading && <p>loading....</p>}\n        {!error && !isLoading && movies.length === 0 && <p>Found no Movies.</p>}\n        {!isLoading && error && <p>{error}</p>} */}\n        {content}\n      </section>\n      \n  </Fragment>\n    \n  )}\n\n    \n\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}